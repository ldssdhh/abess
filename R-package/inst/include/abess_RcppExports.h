// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_abess_RCPPEXPORTS_H_GEN_
#define RCPP_abess_RCPPEXPORTS_H_GEN_

#include <RcppEigen.h>
#include <Rcpp.h>

namespace abess {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("abess", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("abess", "_abess_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in abess");
            }
        }
    }

    inline Eigen::MatrixXd sample_by_conf(long long n, Eigen::MatrixXd theta, int seed) {
        typedef SEXP(*Ptr_sample_by_conf)(SEXP,SEXP,SEXP);
        static Ptr_sample_by_conf p_sample_by_conf = NULL;
        if (p_sample_by_conf == NULL) {
            validateSignature("Eigen::MatrixXd(*sample_by_conf)(long long,Eigen::MatrixXd,int)");
            p_sample_by_conf = (Ptr_sample_by_conf)R_GetCCallable("abess", "_abess_sample_by_conf");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_by_conf(Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(seed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Eigen::MatrixXd >(rcpp_result_gen);
    }

    inline Eigen::MatrixXd Ising_Gibbs(Eigen::MatrixXd theta, int n_sample, int burn, int skip, Eigen::VectorXd value, bool using_seed = false, int set_seed = 1) {
        typedef SEXP(*Ptr_Ising_Gibbs)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_Ising_Gibbs p_Ising_Gibbs = NULL;
        if (p_Ising_Gibbs == NULL) {
            validateSignature("Eigen::MatrixXd(*Ising_Gibbs)(Eigen::MatrixXd,int,int,int,Eigen::VectorXd,bool,int)");
            p_Ising_Gibbs = (Ptr_Ising_Gibbs)R_GetCCallable("abess", "_abess_Ising_Gibbs");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_Ising_Gibbs(Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(n_sample)), Shield<SEXP>(Rcpp::wrap(burn)), Shield<SEXP>(Rcpp::wrap(skip)), Shield<SEXP>(Rcpp::wrap(value)), Shield<SEXP>(Rcpp::wrap(using_seed)), Shield<SEXP>(Rcpp::wrap(set_seed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Eigen::MatrixXd >(rcpp_result_gen);
    }

}

#endif // RCPP_abess_RCPPEXPORTS_H_GEN_
